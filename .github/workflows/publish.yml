name: UNF activity scraper and publish

on:
  workflow_dispatch: {}
  push:
    branches:
      - main
  schedule:
    - cron: "10 6,10,14,20 * * *"  # UTC: 01:10, 06:10, 11:10, 14:10, 16:10, 20:10

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      ICS_PAGES: 4  # 可调:抓取页面数,减少可加速
    outputs:
      skip_deploy: ${{ steps.decide-skip.outputs.skip_deploy }}
    steps:
      - name: Show trigger type and run time
        run: |
          echo "触发类型: $GITHUB_EVENT_NAME"
          echo "运行时间: $(date '+%Y-%m-%d %H:%M:%S')"
      - name: Set workflow run title
        run: |
          echo "设置运行标题"
          if [ "$GITHUB_EVENT_NAME" = "schedule" ]; then
            echo "run_title=定时触发 $(date '+%Y-%m-%d %H:%M:%S')" >> $GITHUB_OUTPUT
          elif [ "$GITHUB_EVENT_NAME" = "push" ]; then
            echo "run_title=推送触发 $(date '+%Y-%m-%d %H:%M:%S')" >> $GITHUB_OUTPUT
          elif [ "$GITHUB_EVENT_NAME" = "workflow_dispatch" ]; then
            echo "run_title=手动触发 $(date '+%Y-%m-%d %H:%M:%S')" >> $GITHUB_OUTPUT
          else
            echo "run_title=其他触发 $(date '+%Y-%m-%d %H:%M:%S')" >> $GITHUB_OUTPUT
          fi
      - name: Checkout (shallow)
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Setup Python (with pip cache)
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: 'pip'
          cache-dependency-path: 'requirements.txt'

      - name: Install deps
        run: |
          pip install -r requirements.txt

      - name: Clean dist
        run: |
          rm -rf dist
          mkdir -p dist

      # Fail fast if secrets missing (never echo real values)
      - name: Check required secrets exist
        env:
          UNF_USER: ${{ secrets.UNF_USER }}
          UNF_PASS: ${{ secrets.UNF_PASS }}
        run: |
          if [ -z "${UNF_USER}" ] || [ -z "${UNF_PASS}" ]; then
            echo "Missing UNF_USER/UNF_PASS secrets."
            exit 1
          fi

      - name: Generate ICS feeds
        env:
          UNF_USER: ${{ secrets.UNF_USER }}
          UNF_PASS: ${{ secrets.UNF_PASS }}
        run: |
          echo "使用页面数: ${ICS_PAGES}"
          python unf_events_to_ics.py --out-dir dist --pages "$ICS_PAGES"
          ls -lah dist

      - name: Decide skip (hash compare with currently published)
        id: decide-skip
        run: |
          set -e
          set -o pipefail
          # 组合新生成 ICS 的内容哈希(按文件名排序保证稳定)
          FILES=$(find dist -maxdepth 1 -type f -name '*.ics' | sort)
          if [ -z "$FILES" ]; then
            echo "No ICS files generated – treat as changed (force deploy)." >&2
            echo "skip_deploy=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          NEW_HASH=$(for f in $FILES; do sha256sum "$f"; done | awk '{print $1}' | tr -d '\n' | sha256sum | awk '{print $1}')
          echo "New combined hash: $NEW_HASH"
          BASE_URL="https://${GITHUB_REPOSITORY_OWNER}.github.io/${GITHUB_REPOSITORY#*/}"
          # 抓取已发布(若存在)对应 ICS 文件内容
          REMOTE_TMP="remote_ics_concat.tmp"
          touch "$REMOTE_TMP"
          MISSING=0
          for f in $FILES; do
            name=$(basename "$f")
            url="$BASE_URL/$name"
            echo "Fetching $url" >&2
            if ! curl -fsSL "$url" >> "$REMOTE_TMP" 2>/dev/null; then
              echo "Remote file missing: $url (treat as changed)" >&2
              MISSING=1
              break
            fi
          done
          if [ $MISSING -eq 0 ]; then
            OLD_HASH=$(sha256sum "$REMOTE_TMP" | awk '{print $1}')
            echo "Old combined hash: $OLD_HASH"
            if [ "$OLD_HASH" = "$NEW_HASH" ]; then
              echo "ICS 内容无变化,标记跳过后续部署."
              echo "skip_deploy=true" >> $GITHUB_OUTPUT
            else
              echo "skip_deploy=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "skip_deploy=false" >> $GITHUB_OUTPUT
          fi

      - name: Update index.html (time + file list)
        if: steps.decide-skip.outputs.skip_deploy != 'true'
        run: |
          set -e
          dt=$(date -u "+%Y-%m-%d %H:%M:%S")
          # 更新最后更新时间 (UTC)
          sed -i "s|<span id=\"last-update-utc\">.*</span>|<span id=\"last-update-utc\">UTC: $dt</span>|" index.html
          # 生成文件列表 (dist 下的文件)
          {
            echo "<table><thead><tr><th>文件</th><th>大小(bytes)</th><th>最后修改(UTC)</th></tr></thead><tbody>"
            for f in dist/*; do
              [ -f "$f" ] || continue
              base=$(basename "$f")
              size=$(stat -c %s "$f")
              mtime=$(stat -c %Y "$f")
              human=$(date -u -d "@$mtime" "+%Y-%m-%d %H:%M:%S UTC")
              echo "<tr><td><a href=\"$base\">$base</a></td><td>$size</td><td>$human</td></tr>"
            done
            echo "</tbody></table>"
          } > filelist.tmp
          perl -0777 -i -pe 'my $r=do{local $/;open my $fh,"<","filelist.tmp";<$fh>}; s/<!-- FILE_LIST_START -->.*?<!-- FILE_LIST_END -->/<!-- FILE_LIST_START -->\n$r<!-- FILE_LIST_END -->/s' index.html
          mkdir -p dist
          cp index.html dist/

      - name: Upload Pages artifact
        if: steps.decide-skip.outputs.skip_deploy != 'true'
        uses: actions/upload-pages-artifact@v3
        with:
          path: dist

  deploy:
    needs: build
    if: needs.build.outputs.skip_deploy != 'true'
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
